// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime? @map("email_verified")
  password            String?
  image               String?
  phone               String?
  gender              String?
  genderOther         String?
  regionalCenter      String?
  type                String? // "homie" | "admin" | "roomate"
  regionalCenterOther String?
  admin               Boolean?  @default(false)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @map("updated_at")
  accounts            Account[]
  sessions            Session[]
  Profile             Profile?
  Address             Address?
  // Realisitcally, a user will only have invites to be a roomate or a homie, not both
  roomanteInvites     Invite[]  @relation("roomate")
  homieInvites        Invite[]  @relation("homie")
  Contacts            Contact[]

  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  address1  String?
  address2  String?
  city      String?
  state     String?
  zip       String?
  type      String?  @default("home")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Profile {
  id                  String   @id @default(cuid())
  userId              String   @unique @map("user_id")
  name                String?
  bio                 String?
  image               String?
  location            String?
  interests           String[] @default([])
  interestsOther      String?
  personalityType     String?
  smoking             String?
  alcohol             String?
  hasPets             String?
  petsDescription     String?
  likesPets           String?
  roommateConflict    String? // Enum: "avoid" | "mediator" | "discuss"
  cleaning            String? // Enum: "weekly" | "monthly" | "sometimes"
  sleepSchedule       String?
  likesParties        String?
  communicationMethod String?
  roommateGender      String[] @default([]) // Options: "male" | "female" | "non-binary" | "transgender-male" | "transgender-female" | "other"
  roommateSharing     String?
  roommateGuests      String?
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// A proposed pairing between a homie and a roomate
model Invite {
  id            String   @id @default(cuid())
  homie         User     @relation("homie", fields: [homieId], references: [id])
  homieId       String
  roomate       User     @relation("roomate", fields: [roomateId], references: [id])
  roomateId     String
  expires       DateTime
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  // pending = no response yet
  roomateStatus String? // "pending" | "accepted" | "rejected"
  homieStatus   String? // "pending" | "accepted" | "rejected"

  @@map("invites")
}

model Contact {
  id     String @id @default(cuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String?
  email     String?
  phone     String?
  relation  String? // Things like parent, sibling, friend, etc.
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("contacts")
}
